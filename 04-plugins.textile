h2. I4: Installing Plugins

In this iteration we'll learn more about plugins and how to take advantage of the many plugins available to quickly add features to your application. We have already worked with several plugins like *DBMigrations* and *Scaffolding*. We will also cover several other topics like Provides, Layouts, Better Forms, and LESS.

h3. Using the *Plugin Manager*

Wheels plugins are distributed in a zip that get stored into your applications file structure. One advantage of this method is that the plugin could be easily checked into your source control system along with everything you wrote in the app. The disadvantage is that it made upgrading to newer versions of the plugin, and dealing with the versions at all, complicated. The *Plugin Manager* will help us with some some of these disadvantages.

Download and drop the *Plugin Manager* in the @/plugins@ folder. Reload the application and we can start using the *Plugin Manager* in our application!

h3. Event Handlers

Once loaded, the *Plugin Manager* notices we haven't set a reloadPassword yet. For security on production we would probably have a password set so not everyone can reload our application. Most likely, we would set this in @/config/production/settings.cfm@ but this instruction @<cfset set(reloadPassword="y0urPassw0rdShouldNotBeThis")>@. We will add @<cfset application.pluginManager.requirePassword = false>@ to @/events/onapplicationstart.cfm@.

Events folder? Well, our @Application.cfc@ in Wheels include @wheels/functions.cfm@ which has a lot of framework code. As a general recommendation We never touch any files in the wheels folder. So how do we using the @Application.cfc@ events then? The answer is to use the events folder. There is a file in there for every single event that @Application.cfc@ can trigger plus some special events for Wheels like "On Error".

h3.  Using the *Plugin Manager* (For Real)

Now we can reload Wheels, and should see a list of all the Wheels plugins. First will be plugins we are currently using. If an upgrade exists, you will see "Version X.X.X Available: @More Info@ @Auto Upgrade@ @Download@". We can select @Auto Upgrade@ so we won't have to worry about updates to plugins. @Download@ will download the plugin into our @/plugins/@ folder.

h3. Responding with Multiple Formats

Changing gears, Wheels controllers provide some powerful mechanisms for responding to requests for content in XML, JSON, and other formats. We want to provide our articles in html (default), pdf, json, and word. First we will add this code to @/controllers/Articles.cfc@. This code will tell the Wheels controller to be ready to provide content in these formats:

<pre lang="cfm">
<code>
<cffunction name="init">
 <cfset provides("html,json,pdf")>
</cffunction>
</code>
</pre>

In our @index@ action of @/controllers/Articles.cfc@ add this line @<cfset renderWith(articles)>@. Wheels can handle HTML, XML, JSON, CSV, PDF, and XLS. XML and JSON Formats can be automatic generated. Let's test the JSON response. Add @?format=json@ to the end of our index page's url. It should return a JSON file. Try @?format=pdf@.

<pre>
Element TEMPLATE is undefined in LOC.

The error occurred in C:\JRun4\servers\cfwheels\cfusion.ear\cfusion.war\wheels\controller\provides.cfm: line 123
<pre>

Not to helpful, huh. Well, we mentioned XML and JSON can be automatically generated so we'll need to provide our own custom responses for PDF. Create @/views/articles/index.pdf.cfm@ and place this in it.

<pre lang="cfm">
<code>
<cfdocument format="pdf">
<h1>Listing articles</h1>
<ul>
 <cfoutput query="articles">
  <li>
  <b>#articles.title#</b><br/>
  </li>
 </cfoutput>
</ul>
</cfdocument>
</code>
</pre>

Reload the page with the error and you should see a pdf with our custom content.

h3. Adding a Word format

In @config/settings.cfm@ add @<cfset addFormat(extension="doc", mimeType="application/msword")/>@. Don't forget to add @doc@ to the @provides@ instruction in @/controllers/Articles.cfc@.

Copy @/views/articles/index.pdf.cfm@ and delete the starting and ending @cfdocument@ instructions. This isn't very DRY but you can fix that later. Then refresh the article list in your browser. Tada!

h3. Improving the Form

h3. Working with Layouts

We've created about a dozen view templates between our different models. We _could_ go into each of those templates and add a line like this at the top:

<%= stylesheet_link_tag 'styles' %>Which would find the LESS file we just wrote. Thats a lame job, imagine if we had 100 view templates. What if we want to change the name of the stylesheet later? Ugh.

Wheels and ColdFusion both emphasize the idea ofD.R.Y.Dont Repeat Yourself. In the area of view templates, we can achieve this by creating a *layout*. A layout is a special view template that wraps other views. Look in your navigation pane for @/views/layouts/@ , right click on that folder, click %(caps)NEW% and %(caps)FILE% then give it the name @application.html.haml@.

In this layout well put the view code that we want to render for every view template in the application. Just so you can see what %(caps)HAML% looks like, Ive used it to implement this layout. you'll notice that %(caps)HAML% uses fewer marking characters than %(caps)ERB% , but you must maintain the proper whitespace/indentation. All indentations are two spaces from the containing element. Add this code to your @application.html.haml@ :

!!! Strict %html %head %title JSBlogger = stylesheet_link_tag 'styles' %body #container #content = yieldNow refresh your article listing page and you should see the styles take effect. Whatever code is in the individual view template gets inserted into the layout where you see the @yield@. Using layouts makes it easy to add site-wide elements like navigation, sidebars, and so forth.

 * %(caps)NOTE% * : If you dont see any change, look at your server log in Eclipse to see if there were any errors. At first I had a typo in one of the filenames so it wasn't being picked up properly. You might also need to stop&restart your server if you didnt do that after installing the @haml@ gem.
 
h3. Installing %(caps)LESS%

Another plugin that I use in every project is actually two libraries in one. %(caps)HAML% is an alternative templating style to the default %(caps)ERB% (which you've been using, hence all the view templates ending in @.erb@ ). %(caps)LESS% is a library for writing %(caps)CSS% and it makes %(caps)CSS% much, much easier to work with.

Open your @Gemfile@ and add a @gem@ line for the gem @haml@. Go to your terminal and @bundle@ and it should pull down the gem library for you. Stop (with the red square) then restart (green play button) your server within Eclipse. Both %(caps)HAML% and %(caps)LESS% are installed and ready to use.

Look in Eclipses left navigation pane for the folder @/public/stylesheets/@. Right click on this folder, click %(caps)NEW% , then %(caps)DIRECTORY% , and name it @LESS@. Then right click on the @LESS@ folder, click %(caps)NEW% , %(caps)FILE% , then enter the name @styles.LESS@ 

h3. A Few LESS Examples

All the details about LESS can be found here: "http://LESS-lang.com/":http://LESS-lang.com/ 

Were not focusing on %(caps)CSS% development, so here are a few styles that you can copy&paste and modify to your hearts content:

!primary_color = #AAA body :background-color = !primary_color :font :family Verdana, Helvetica, Arial :size 14px a :color #0000FF img :border none.clear :clear both :height 0 :overflow hidden #container :width 75% :margin 0 auto :background #fff :padding 20px 40px :border solid 1px black :margin-top 20px #content :clear both :padding-top 20pxBut our application isn't setup to load that stylesheet yet. We need to make a change to our view templates.