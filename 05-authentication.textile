h2. I5: Authentication

Authentication is an important part of almost any web application and there are several approache's to take. We will create one using a @filter@. @Filters@ tell Wheels to run a function before an action is run or after an action has been run. You can also specify multiple functions and actions.

h3. Creating a Login view

Create a new folder and file @/views/main/login.cfm@ with this code:

<pre lang="cfm">
<code>
<cfoutput>

<h1>Login</h1>
<cfif isdefined("error")>
 <cfdump var="#error#">
</cfif>

#flash("error")#
#errorMessagesFor("user")#
	
#startFormTag(controller="main", action="signin")#

 #textField(label="Email", objectName="user", property="email")#
 #passwordField(label="Password", objectName="user", property="password")#

 <div>
  #submitTag(value="Sign In")#
 </div>

#endFormTag()#

</cfoutput>
</code>
</pre>

Nothing special here. Lets try to load our login page at @http://wheels.local/index.cfm/main/login@ If its there, you're ready to go!

h3. Creating the Person Model

We will create a Model for our users called @Person.cfc@. It will validate several of our properties.

<pre lang="cfm">
<code>
<cfcomponent extends="Model" output="false">

 <cffunction name="init">

  <!--- Validations --->
  <cfset validatesPresenceOf("firstName,lastName,email")>
  <cfset validatesFormatOf(property="email", type="email")>
  <cfset validatesLengthOf(property="firstName", maximum=30)>
  <cfset validatesLengthOf(property="lastName", maximum=50)>
  <cfset validatesConfirmationOf("password")>

 </cffunction>

</cfcomponent>
</code>
</pre>

h3. Creating our Main Controller

We will make a simple controller with the following actions: @login@, @logout@, and @signin@. The @signin@ action creates a session structure called user if the email and password is correct.

<pre lang="cfm">
<code>
<cfcomponent extends="Controller" output="false">
	
 <cffunction name="init">

 </cffunction>

 <cffunction name="login">
  <cfset user = model("person").new()>
 </cffunction>

 <cffunction name="logout">
  <cfset StructDelete(session, "user")>
  <cfset redirectTo(controller="main", action="login")>
 </cffunction>

 <cffunction name="signin">
  <cfset user = model("person").findOne(where="email='#params.user.email#' AND password='#hash(params.user.password)#'")>

  <cfif IsObject(user)>
   <cfset session.user.id = user.id>
   <cfset redirectTo(controller="articles", action="index")>
  <cfelse>
   <cfset user = model("person").new(email=params.user.email)>
   <cfset flashInsert(error="The email and password that you entered is not valid.")>
   <cfset renderPage(action="login")>
  </cfif>
 </cffunction>
	
</cfcomponent>
</code>
</pre>

Now login with @admin@@gmail.com@ and @admin@ and you should be directed to our listing page.

h3. Securing Creating/Updating Articles

It looks like we can create a new user, but right away I want to make some changes. Were just going to use one layer of security for the appa user who is logged in has access to all the commands and pages, while a user who isn't logged in can only post comments and try to login. But that scheme will breakdown if just anyone can go to this %(caps)URL% and create an account, right?

Lets add in a protection scheme like this to the new users form:

* If there are zero users in the system, let anyone access the form
* If there are more than zero users registered, only users already logged in can access this form

That way when the app is first setup we can create an account, then new users can only be created by a logged in user.

We can create a @filters@ which will run _before_ all the actions except: @index@, @login@, @show@, and @create@. Open the @/controllers/Controller.cfc@ and add this code between the @cfcomponent@ instructions:

<pre lang="cfm">
<code>
<cffunction name="init">
 <cfset filters(through="checkLogin", except="index,login,show,create")>
</cffunction>

<cffunction name="checkLogin">
 <cfif StructKeyExists(session, "user")>
  <cfset loggedInUser = model("person").findByKey(session.user.id)>
 <cfelse>
  <cfset redirectTo(controller="main", action="login")>
 </cfif>
</cffunction>
</code>
</pre>

You can add other functions to @/controllers/Controller.cfc@ and make them globally available in all your controllers like we did for @checkLogin@.

The first line declares that we want to run a before filter named @zero_or_authenticated@ when either the @new@ or @create@ methods are accessed. Then we define that filter, checking if there are either zero registered users OR if there is a user already logged in. If neither of those is true, we redirect to the root path (our articles list) and return false. If either one of them is true this filter wont do anything, allowing the requested user registration form to be rendered.

With that in place, try accessing @/users/new@ when you logged in and when your logged out. If you want to test that it works when no users exist, try this at your Examples:

User.delete_all

Then try to reach the registration form and it should work! Create yourself an account if you've deleteed it.

The first thing we need to do is sprinkle @before_filters@ on most of our controllers:

* In @users.cfc@ , add a before filter to protect the actions besides @new@ and @create@ like this:
 @before_filter :login_required, :except =>[new, :create]@ 
* In @tags.cfc@ , we don't have any methods that need to be protected.
* In @sessions.cfc@ all the methods need to be accessible to allow login and logout
* In @comments.cfc@ , we never implemented @index@ and @delete@ , but just in case we do lets allow unauthenticated users to only access @create@ :
 @before_filter :login_required, :except =>[create]@ 
* In @Articles.cfc@ authentication should be required for @new@ , @create@ , @edit@ , @update@ and @delete@. Figure out how to write the before filter using either @only@ or @except@ 

Now our app is pretty secure, but we should hide all those edit, delete, and new article links from unauthenticated users.

Open @/views/articles/index.cfm@ and find the section where we output theActions. Wrap that whole section in an @if@ clause like this:

@<% if current_user %><% end %>@

Look at the article listing in your browser when you're logged out and make sure those links disappear. Then use the same technique to hide the Create a New Article link.

h3. Better Navigation

<pre lang="cfm">
<code>
<div id="navbar">
 <ul>
 <cfif "show,edit,new,login" contains params.action >
  <li>#linkTo(text="<< Back to Articles List", controller="articles", action="index")#</li>
 </cfif>
 <cfif StructKeyExists(session, "user")>
  <li>#linkTo(text="Create a New Article", action="new")#</li>
  <li>#linkTo(text="Logout", controller="main", action="logout")#</li>
 <cfelseif params.action NEQ "login">
  <li>#linkTo(text="Login", controller="main", action="login")#</li>
 </cfif>
</ul>
</div>
</code>
</pre>

If you look at the @show@ view template, you'll see that we never added an edit link! Add that link now, but protect it to only show up when a user is logged in.

Your basic authentication is done, and Iteration 5 is complete!